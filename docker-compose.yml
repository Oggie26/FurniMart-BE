version: '3.8'

services:

  eureka-server:
    build: ./eureka-server
    container_name: eureka-server
    ports:
      - "8761:8761"
    networks:
      - backend
    restart: unless-stopped

  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "8080:8080"
    depends_on:
      - eureka-server
    networks:
      - backend
    restart: unless-stopped

  product-service:
    build: ./product-service
    container_name: product-service
    ports:
      - "8084:8084"
    depends_on:
      - eureka-server
      - product-db
    networks:
      - backend
    restart: unless-stopped
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://product-db:5432/product_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 123456
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "true"

  product-db:
    image: postgres:16
    container_name: product-db
    restart: always
    environment:
      POSTGRES_DB: product_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
    ports:
      - "5436:5432"
    volumes:
      - product_data:/var/lib/postgresql/data
    networks:
      - backend

  user-service:
    build: ./user-service
    container_name: user-service
    ports:
      - "8086:8086"
    depends_on:
      - eureka-server
      - user-db
      - redis
      - kafka
    networks:
      - backend
    restart: unless-stopped
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://user-db:5432/user_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 123456
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "true"
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092

  user-db:
    image: postgres:16
    container_name: user-db
    restart: always
    environment:
      POSTGRES_DB: user_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
    ports:
      - "5435:5432"
    volumes:
      - user_data:/var/lib/postgresql/data
    networks:
      - backend

  order-service:
    build: ./order-service
    container_name: order-service
    ports:
      - "8085:8085"
    depends_on:
      - eureka-server
      - order-db
      - kafka
    networks:
      - backend
    restart: unless-stopped
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://order-db:5432/order_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 123456
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "true"
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092

  order-db:
    image: postgres:16
    container_name: order-db
    restart: always
    environment:
      POSTGRES_DB: order_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
    ports:
      - "5437:5432"
    volumes:
      - order_data:/var/lib/postgresql/data
    networks:
      - backend

  inventory-service:
    build: ./inventory-service
    container_name: inventory-service
    ports:
      - "8083:8083"
    depends_on:
      - eureka-server
      - inventory-db
      - kafka
    networks:
      - backend
    restart: unless-stopped
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://inventory-db:5432/inventory_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 123456
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "true"
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092

  inventory-db:
    image: postgres:16
    container_name: inventory-db
    restart: always
    environment:
      POSTGRES_DB: inventory_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
    ports:
      - "5438:5432"
    volumes:
      - inventory_data:/var/lib/postgresql/data
    networks:
      - backend

  payment-service:
    build: ./payment-service
    container_name: payment-service
    ports:
      - "8088:8088"
    depends_on:
      - eureka-server
      - payment-db
      - kafka
    networks:
      - backend
    restart: unless-stopped
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://payment-db:5432/payment_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 123456
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "true"
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092

  payment-db:
    image: postgres:16
    container_name: payment-db
    restart: always
    environment:
      POSTGRES_DB: payment_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
    ports:
      - "5439:5432"
    volumes:
      - payment_data:/var/lib/postgresql/data
    networks:
      - backend

  delivery-service:
    build: ./delivery-service
    container_name: delivery-service
    ports:
      - "8089:8089"
    depends_on:
      - eureka-server
      - delivery-db
      - kafka
    networks:
      - backend
    restart: unless-stopped
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://delivery-db:5432/delivery_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 123456
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "true"
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092

  delivery-db:
    image: postgres:16
    container_name: delivery-db
    restart: always
    environment:
      POSTGRES_DB: delivery_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
    ports:
      - "5440:5432"
    volumes:
      - delivery_data:/var/lib/postgresql/data
    networks:
      - backend

  file-service:
    build: ./file-service
    container_name: file-service
    ports:
      - "8090:8090"
    depends_on:
      - eureka-server
      - file-db
    networks:
      - backend
    restart: unless-stopped
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://file-db:5432/file_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 123456
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "true"

  file-db:
    image: postgres:16
    container_name: file-db
    restart: always
    environment:
      POSTGRES_DB: file_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
    ports:
      - "5441:5432"
    volumes:
      - file_data:/var/lib/postgresql/data
    networks:
      - backend

  notification-service:
    build: ./notification-service
    container_name: notification-service
    ports:
      - "8087:8087"
    depends_on:
      - eureka-server
      - kafka
    networks:
      - backend
    restart: unless-stopped
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - backend
    command: redis-server --appendonly yes

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512m

  kafka:
    image: confluentinc/cp-kafka:7.4.4
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1g

networks:
  backend:

volumes:
  user_data:
  product_data:
  order_data:
  inventory_data:
  payment_data:
  delivery_data:
  file_data:
