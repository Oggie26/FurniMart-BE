package com.example.aiservice.service;

import com.example.aiservice.feign.ProductClient;
import com.example.aiservice.response.ApiResponse;
import com.example.aiservice.response.ProductResponse;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.ai.chat.model.ChatResponse;
import org.springframework.ai.chat.prompt.Prompt;
import org.springframework.ai.openai.OpenAiChatModel;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
@Slf4j
public class ChatBoxService {

    private final OpenAiChatModel chatModel;
    private final ProductClient productClient;

    public String chatWithAI(String message) {
        log.info("üí¨ Tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng: {}", message);

        // G·ªçi Product Service
        ApiResponse<List<ProductResponse>> response;
        try {
            response = productClient.getProducts();
            int count = (response != null && response.getData() != null) ? response.getData().size() : 0;
            log.info("‚úÖ G·ªçi Product Service th√†nh c√¥ng, nh·∫≠n ƒë∆∞·ª£c {} s·∫£n ph·∫©m", count);
        } catch (Exception e) {
            log.error("‚ùå L·ªói khi g·ªçi Product Service qua Feign: {}", e.getMessage());
            return "Xin l·ªói, t√¥i ch∆∞a th·ªÉ l·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m t·ª´ h·ªá th·ªëng. B·∫°n th·ª≠ l·∫°i sau nh√©!";
        }

        if (response == null || response.getData() == null || response.getData().isEmpty()) {
            return "Hi·ªán ch∆∞a c√≥ s·∫£n ph·∫©m n√†o trong h·ªá th·ªëng üòÖ.";
        }

        // L√†m s·∫°ch keyword
        String keyword = extractKeyword(message);
        log.info("üîç Keyword sau khi x·ª≠ l√Ω: {}", keyword);

        // N·∫øu c√¢u h·ªèi chung chung (v√≠ d·ª•: ‚Äúc√≥ bao nhi√™u s·∫£n ph·∫©m‚Äù) ‚Üí kh√¥ng l·ªçc
        List<ProductResponse> matchedProducts = (keyword.isEmpty() || isGeneralQuestion(message))
                ? response.getData()
                : response.getData().stream()
                .filter(p -> p.getName() != null &&
                        p.getName().toLowerCase().contains(keyword.toLowerCase()))
                .limit(10)
                .toList();

        if (matchedProducts.isEmpty()) {
            return "T√¥i kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o li√™n quan ƒë·∫øn ‚Äú" + keyword + "‚Äù üòÖ.";
        }

        // T√≥m t·∫Øt danh s√°ch s·∫£n ph·∫©m g·ª≠i cho AI
        StringBuilder productSummary = new StringBuilder("Danh s√°ch s·∫£n ph·∫©m hi·ªán c√≥:\n");
        matchedProducts.forEach(p -> {
            productSummary.append("- ").append(p.getName());
            if (p.getColor() != null) productSummary.append(" (M√†u: ").append(p.getColor()).append(")");
            if (p.getPrice() != null) productSummary.append(", Gi√°: ").append(p.getPrice()).append("‚Ç´");
            productSummary.append("\n");
        });

        // Prompt c·∫£i ti·∫øn
        String prompt = """
        B·∫°n l√† **FurniAI**, tr·ª£ l√Ω AI chuy√™n nghi·ªáp c·ªßa c·ª≠a h√†ng n·ªôi th·∫•t FurniMart.
        Nhi·ªám v·ª• c·ªßa b·∫°n l√† h·ªó tr·ª£ kh√°ch h√†ng v·ªÅ s·∫£n ph·∫©m, gi√° c·∫£, v√† g·ª£i √Ω l·ª±a ch·ªçn ph√π h·ª£p.

        ## C√¢u h·ªèi c·ªßa kh√°ch:
        "%s"

        ## D·ªØ li·ªáu s·∫£n ph·∫©m hi·ªán c√≥ (JSON t√≥m t·∫Øt):
        %s

        ## H∆∞·ªõng d·∫´n tr·∫£ l·ªùi:
        1. N·∫øu c√¢u h·ªèi v·ªÅ s·ªë l∆∞·ª£ng, li·ªát k√™, hay t√¨m s·∫£n ph·∫©m ‚Üí h√£y d√πng d·ªØ li·ªáu tr√™n ƒë·ªÉ tr·∫£ l·ªùi chi ti·∫øt.
        2. N·∫øu h·ªèi t∆∞ v·∫•n phong c√°ch n·ªôi th·∫•t ‚Üí ph√¢n t√≠ch nhu c·∫ßu v√† g·ª£i √Ω s·∫£n ph·∫©m ph√π h·ª£p.
        3. N·∫øu kh√¥ng li√™n quan ƒë·∫øn s·∫£n ph·∫©m ‚Üí tr·∫£ l·ªùi th√¢n thi·ªán, g·ª£i √Ω kh√°ch h·ªèi l·∫°i v·ªÅ s·∫£n ph·∫©m.

        Y√™u c·∫ßu:
        - Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát t·ª± nhi√™n, d·ªÖ hi·ªÉu, gi·ªçng th√¢n thi·ªán nh∆∞ nh√¢n vi√™n t∆∞ v·∫•n th·∫≠t.
        - Kh√¥ng l·∫∑p l·∫°i c√¢u h·ªèi c·ªßa kh√°ch.
        - N·∫øu c√≥ th·ªÉ, h√£y g·ª£i √Ω th√™m 1‚Äì2 s·∫£n ph·∫©m li√™n quan ƒë·ªÉ tƒÉng t∆∞∆°ng t√°c.
        """.formatted(message, productSummary);

        // G·ªçi OpenAI
        try {
            ChatResponse aiResponse = chatModel.call(new Prompt(prompt));
            String reply = aiResponse.getResult().getOutput().getText();
            log.info("ü§ñ AI Response: {}", reply);
            return reply != null && !reply.isBlank()
                    ? reply.trim()
                    : "Xin l·ªói, t√¥i ch∆∞a hi·ªÉu r√µ c√¢u h·ªèi c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ n√≥i c·ª• th·ªÉ h∆°n kh√¥ng?";
        } catch (Exception e) {
            log.error("‚ùå L·ªói khi g·ªçi OpenAI API: {}", e.getMessage());
            return "Xin l·ªói, h·ªá th·ªëng AI ƒëang t·∫°m gi√°n ƒëo·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau nh√©!";
        }
    }

    private String extractKeyword(String message) {
        if (message == null || message.isBlank()) return "";
        return message.replaceAll("[^\\p{L}\\p{N}\\s]", "").trim();
    }

    private boolean isGeneralQuestion(String message) {
        if (message == null) return false;
        String lower = message.toLowerCase();
        return lower.contains("bao nhi√™u")
                || lower.contains("t·ªïng s·ªë")
                || lower.contains("li·ªát k√™")
                || lower.contains("s·∫£n ph·∫©m n√†o")
                || lower.contains("c√≥ nh·ªØng g√¨");
    }
}
