package com.example.aiservice.service;

import com.example.aiservice.feign.ProductClient;
import com.example.aiservice.response.ApiResponse;
import com.example.aiservice.response.ProductResponse;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.ai.chat.model.ChatResponse;
import org.springframework.ai.chat.prompt.Prompt;
import org.springframework.ai.openai.OpenAiChatModel;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Slf4j
public class ChatBoxService {

    private final OpenAiChatModel chatModel;
    private final ProductClient productClient;

    public String chatWithAI(String message) {
        String keyword = extractKeyword(message);
        log.info("üí¨ User message: {}", message);
        log.info("üîç Extracted keyword: {}", keyword);

        ApiResponse<List<ProductResponse>> response;
        try {
            response = productClient.getProducts();
        } catch (Exception e) {
            log.error("‚ùå L·ªói khi g·ªçi Product Service qua Feign: {}", e.getMessage());
            return "Xin l·ªói, t√¥i ch∆∞a th·ªÉ l·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m. B·∫°n th·ª≠ l·∫°i sau nh√©!";
        }

        if (response == null || response.getData() == null || response.getData().isEmpty()) {
            return "Hi·ªán ch∆∞a c√≥ s·∫£n ph·∫©m n√†o trong h·ªá th·ªëng üòÖ.";
        }

        List<ProductResponse> filtered = response.getData().stream()
                .filter(p -> p.getName().toLowerCase().contains(keyword.toLowerCase()))
                .limit(5)
                .toList();

        if (filtered.isEmpty()) {
            return "T√¥i kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o c√≥ li√™n quan ƒë·∫øn ‚Äú" + keyword + "‚Äù üòÖ.";
        }

        StringBuilder productSummary = new StringBuilder("M·ªôt s·ªë s·∫£n ph·∫©m b·∫°n c√≥ th·ªÉ quan t√¢m:\n");
        for (ProductResponse p : filtered) {
            productSummary.append("- ").append(p.getName())
                    .append(" (Gi√°: ").append(p.getPrice()).append("‚Ç´)\n");
        }

        String prompt = """
                B·∫°n l√† tr·ª£ l√Ω n·ªôi th·∫•t FurniAI th√¢n thi·ªán.
                Ng∆∞·ªùi d√πng h·ªèi: %s
                D∆∞·ªõi ƒë√¢y l√† danh s√°ch s·∫£n ph·∫©m c√≥ th·ªÉ ph√π h·ª£p:
                %s
                H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn, t·ª± nhi√™n, t∆∞ v·∫•n g·ª£i √Ω th√™m c√°ch ph·ªëi n·ªôi th·∫•t ho·∫∑c v·∫≠t li·ªáu ph√π h·ª£p.
                """.formatted(message, productSummary);

        try {
            ChatResponse aiResponse = chatModel.call(new Prompt(prompt));
            return aiResponse.getResult().getOutput().getText();
        } catch (Exception e) {
            log.error("‚ùå L·ªói khi g·ªçi OpenAI API: {}", e.getMessage());
            return "Xin l·ªói, AI ƒëang g·∫∑p s·ª± c·ªë t·∫°m th·ªùi. B·∫°n th·ª≠ l·∫°i sau nh√©!";
        }
    }

    private String extractKeyword(String message) {
        if (message == null || message.isBlank()) return "";
        return message.replaceAll("[^\\p{L}\\p{N}\\s]", "").trim();
    }
}
