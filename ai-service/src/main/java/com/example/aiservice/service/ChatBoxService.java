package com.example.aiservice.service;

import com.example.aiservice.feign.ProductClient;
import com.example.aiservice.response.ApiResponse;
import com.example.aiservice.response.PageResponse;
import com.example.aiservice.response.ProductResponse;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.ai.chat.model.ChatResponse;
import org.springframework.ai.chat.prompt.Prompt;
import org.springframework.ai.openai.OpenAiChatModel;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
@Slf4j
public class ChatBoxService {

    private final OpenAiChatModel chatModel;
    private final ProductClient productClient;

    public String chatWithAI(String message) {
        // üîπ B1: R√∫t g·ªçn v√† l√†m s·∫°ch input
        String keyword = extractKeyword(message);
        log.info("User message: {}", message);
        log.info("Extracted keyword: {}", keyword);

        // üîπ B2: G·ªçi Product Service ƒë·ªÉ t√¨m s·∫£n ph·∫©m
        ApiResponse<PageResponse<ProductResponse>> response;
        try {
            response = productClient.searchProducts(keyword, 0, 5);
        } catch (Exception e) {
            log.error("‚ùå L·ªói khi g·ªçi Product Service qua Feign: {}", e.getMessage());
            return "Xin l·ªói, hi·ªán t√¥i kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m. B·∫°n th·ª≠ l·∫°i sau nh√©!";
        }

        if (response == null || response.getData() == null || response.getData().getContent().isEmpty()) {
            return "Hi·ªán ch∆∞a t√¨m th·∫•y s·∫£n ph·∫©m n√†o ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n üòÖ.";
        }

        List<ProductResponse> products = response.getData().getContent();

        // üîπ B3: Gh√©p danh s√°ch s·∫£n ph·∫©m th√†nh vƒÉn b·∫£n
        StringBuilder productSummary = new StringBuilder("M·ªôt s·ªë s·∫£n ph·∫©m b·∫°n c√≥ th·ªÉ quan t√¢m:\n");
        for (ProductResponse p : products) {
            productSummary.append("- ")
                    .append(p.getName())
                    .append(" (Gi√°: ")
                    .append(p.getPrice())
                    .append("‚Ç´)\n");
        }

        // üîπ B4: T·∫°o prompt cho AI
        String prompt = """
                B·∫°n l√† tr·ª£ l√Ω t∆∞ v·∫•n n·ªôi th·∫•t th√¥ng minh FurniAI.
                Ng∆∞·ªùi d√πng h·ªèi: %s
                D∆∞·ªõi ƒë√¢y l√† danh s√°ch s·∫£n ph·∫©m c√≥ th·ªÉ ph√π h·ª£p:
                %s
                H√£y ph·∫£n h·ªìi b·∫±ng gi·ªçng th√¢n thi·ªán, ng·∫Øn g·ªçn v√† g·ª£i √Ω th√™m c√°ch ph·ªëi h·ª£p n·ªôi th·∫•t ho·∫∑c v·∫≠t li·ªáu ph√π h·ª£p.
                """.formatted(message, productSummary);

        // üîπ B5: G·ªçi AI model (Spring AI)
        try {
            ChatResponse aiResponse = chatModel.call(new Prompt(prompt));
            aiResponse.getResult();
            aiResponse.getResult().getOutput();
            return aiResponse.getResult().getOutput().getText();
        } catch (Exception e) {
            log.error("‚ùå L·ªói khi g·ªçi OpenAI API: {}", e.getMessage());
            return "Xin l·ªói, AI ƒëang g·∫∑p s·ª± c·ªë t·∫°m th·ªùi. B·∫°n th·ª≠ l·∫°i sau nh√©!";
        }
    }

    private String extractKeyword(String message) {
        if (message == null || message.isBlank()) return "";
        return message.replaceAll("[^\\p{L}\\p{N}\\s]", "").trim();
    }
}
