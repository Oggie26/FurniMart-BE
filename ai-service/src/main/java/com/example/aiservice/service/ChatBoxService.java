package com.example.aiservice.service;

import com.example.aiservice.feign.ProductClient;
import com.example.aiservice.response.ApiResponse;
import com.example.aiservice.response.ProductResponse;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.ai.chat.model.ChatResponse;
import org.springframework.ai.chat.prompt.Prompt;
import org.springframework.ai.openai.OpenAiChatModel;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
@Slf4j
public class ChatBoxService {

    private final OpenAiChatModel chatModel;
    private final ProductClient productClient;

    public String chatWithAI(String message) {
        log.info("üí¨ User message: {}", message);

        String keyword = extractKeyword(message);
        log.info("üîç Extracted keyword: {}", keyword);

        ApiResponse<List<ProductResponse>> response;

        try {
            response = productClient.getProducts();
            log.info("‚úÖ G·ªçi Product Service th√†nh c√¥ng, nh·∫≠n ƒë∆∞·ª£c {} s·∫£n ph·∫©m",
                    response != null && response.getData() != null ? response.getData().size() : 0);
        } catch (Exception e) {
            log.error("‚ùå L·ªói khi g·ªçi Product Service qua Feign: {}", e.getMessage());
            return "Xin l·ªói, t√¥i ch∆∞a th·ªÉ l·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m. B·∫°n th·ª≠ l·∫°i sau nh√©!";
        }

        if (response == null || response.getData() == null || response.getData().isEmpty()) {
            return "Hi·ªán ch∆∞a c√≥ s·∫£n ph·∫©m n√†o trong h·ªá th·ªëng üòÖ.";
        }

        List<ProductResponse> filtered = response.getData().stream()
                .filter(p -> p.getName() != null &&
                        p.getName().toLowerCase().contains(keyword.toLowerCase()))
                .limit(5)
                .toList();

        if (filtered.isEmpty()) {
            return "T√¥i kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o li√™n quan ƒë·∫øn ‚Äú" + keyword + "‚Äù üòÖ.";
        }

        // T√≥m t·∫Øt s·∫£n ph·∫©m g·ª≠i cho AI
        StringBuilder productSummary = new StringBuilder("M·ªôt s·ªë s·∫£n ph·∫©m b·∫°n c√≥ th·ªÉ quan t√¢m:\n");
        for (ProductResponse p : filtered) {
            productSummary.append("- ")
                    .append(p.getName())
                    .append(" (Gi√°: ").append(p.getPrice()).append("‚Ç´");
            if (p.getColor() != null ) {
                productSummary.append(", M√†u: ").append(p.getColor());
            }
            productSummary.append(")\n");
        }

        // Prompt cho AI
        String prompt = """
            B·∫°n l√† tr·ª£ l√Ω n·ªôi th·∫•t th√¥ng minh FurniAI.
            H√£y ƒë·ªçc c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng v√† t∆∞ v·∫•n th·∫≠t chuy√™n nghi·ªáp.
            
            C√¢u h·ªèi ng∆∞·ªùi d√πng:
            "%s"
            
            Danh s√°ch s·∫£n ph·∫©m hi·ªán c√≥ trong c·ª≠a h√†ng:
            %s
            
            Nhi·ªám v·ª• c·ªßa b·∫°n:
            - N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ t∆∞ v·∫•n n·ªôi th·∫•t, h√£y ph√¢n t√≠ch nhu c·∫ßu (ph√≤ng, di·ªán t√≠ch, phong c√°ch, m√†u s·∫Øc, ng√¢n s√°ch).
            - ƒê·ªÅ xu·∫•t 2‚Äì3 s·∫£n ph·∫©m ph√π h·ª£p trong danh s√°ch k√®m l√Ω do ch·ªçn.
            - G·ª£i √Ω th√™m v·∫≠t li·ªáu ho·∫∑c m√†u s·∫Øc ƒë·ªÉ ph·ªëi h·ª£p ƒë·∫πp m·∫Øt.
            - N·∫øu c√¢u h·ªèi kh√¥ng li√™n quan s·∫£n ph·∫©m, h√£y tr·∫£ l·ªùi th√¢n thi·ªán, ng·∫Øn g·ªçn, v√† g·ª£i √Ω c√°ch h·ªèi kh√°c.
            
            H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát t·ª± nhi√™n, gi·ªçng th√¢n thi·ªán nh∆∞ ƒëang t∆∞ v·∫•n kh√°ch h√†ng.
            """.formatted(message, productSummary);

        try {
            ChatResponse aiResponse = chatModel.call(new Prompt(prompt));
            return aiResponse.getResult().getOutput().getText();
        } catch (Exception e) {
            log.error("‚ùå L·ªói khi g·ªçi OpenAI API: {}", e.getMessage());
            return "Xin l·ªói, AI ƒëang g·∫∑p s·ª± c·ªë t·∫°m th·ªùi. B·∫°n th·ª≠ l·∫°i sau nh√©!";
        }
    }

    private String extractKeyword(String message) {
        if (message == null || message.isBlank()) return "";
        return message.replaceAll("[^\\p{L}\\p{N}\\s]", "").trim();
    }
}
